name: Build Android App Bundle
run-name: Build Celestial Oracle Android App ðŸš€

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Android App Bundle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          target: google_apis
          arch: x86_64

      - name: Install dependencies
        run: npm install

      - name: Build Vite app
        run: npm run build

      - name: Remove old Android folder
        run: rm -rf android || true

      - name: Add Android platform
        run: |
          npx cap add android
          npx cap sync android

      - name: Update Gradle properties globally
        run: |
          # Create gradle.properties in android folder
          cat > android/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4096m
          android.useAndroidX=true
          android.enableJetifier=true
          android.compileSdkVersion=35
          android.targetSdkVersion=35
          android.minSdkVersion=24
          EOF
          
          echo "âœ… gradle.properties created"
          cat android/gradle.properties

      - name: Update build.gradle with Python script
        run: |
          python3 << 'PYTHON_SCRIPT'
          import os
          
          gradle_file = "android/app/build.gradle"
          
          # Read the file
          with open(gradle_file, 'r') as f:
              lines = f.readlines()
          
          # Rewrite with corrections
          new_lines = []
          in_android_block = False
          indent_level = 0
          
          for line in lines:
              # Replace SDK versions wherever they appear
              if 'compileSdkVersion' in line:
                  line = line.replace(line.split('=')[1].strip(), '35\n') if '=' in line else line
                  new_lines.append('    compileSdkVersion = 35\n')
                  continue
              elif 'targetSdkVersion' in line:
                  new_lines.append('    targetSdkVersion = 35\n')
                  continue
              elif 'versionCode' in line and 'versionCode' in line:
                  new_lines.append('        versionCode 2\n')
                  continue
              
              new_lines.append(line)
          
          # Write back
          with open(gradle_file, 'w') as f:
              f.writelines(new_lines)
          
          print("âœ… build.gradle updated")
          print("\nUpdated lines:")
          with open(gradle_file, 'r') as f:
              for i, line in enumerate(f, 1):
                  if any(x in line for x in ['compileSdk', 'targetSdk', 'versionCode']):
                      print(f"{i}: {line.rstrip()}")
          PYTHON_SCRIPT

      - name: Verify build.gradle
        run: |
          echo "ðŸ“‹ Checking build.gradle content:"
          grep -n "compileSdkVersion\|targetSdkVersion\|versionCode" android/app/build.gradle

      - name: Decode Keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
          ls -lh android/app/keystore.jks

      - name: Make gradlew executable
        run: chmod +x android/gradlew

      - name: Build App Bundle
        run: |
          cd android
          ./gradlew bundleRelease \
            -x lint \
            -Pandroid.injected.signing.store.file=$(pwd)/app/keystore.jks \
            -Pandroid.injected.signing.store.password="${{ secrets.KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.KEY_PASSWORD }}" \
            --stacktrace

      - name: Verify API Level in AAB
        run: |
          cd android/app/build/outputs/bundle/release
          
          # Try to extract manifest
          unzip -p app-release.aab base/manifest/AndroidManifest.xml > /tmp/manifest.bin 2>/dev/null || true
          
          echo "âœ… App Bundle created:"
          ls -lh app-release.aab

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: celestial-oracle-release-aab-v2
          path: android/app/build/outputs/bundle/release/app-release.aab
          retention-days: 30

      - name: Build Success
        run: echo "âœ… Build complete with API Level 35!"
